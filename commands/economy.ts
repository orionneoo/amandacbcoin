import { proto } from '@whiskeysockets/baileys';
import db from '../database';
import { getRandomNumber } from '../utils/random';
<<<<<<< HEAD

const DAILY_COINS = 1000; // Recompensa diaria
const MINING_CHANCES = 6; // Chance de minerar
const STEAL_CHANCES = 4; // Roubar
const AVENGE_CHANCES = 2; // Chances de vingar
const LEND_CHANCES = 2; // Chance de emprestar
const DONATE_CHANCES = 2; // Chance de doar
const CASINO_CHANCES = 6; // Chance de apostar
const SHIELD_PRICE = 2500;  // Pre√ßo do escudo
const LUCKY_CHARM_PRICE = 1000;  // Pre√ßo do amuleto da sorte
const SNIPER_PRICE = 5000;  // Pre√ßo para usar o sniper
const SNIPER_COOLDOWN = 24 * 60 * 60 * 1000; // 24 horas em milissegundos
const LUCKY_PRIZE = 5000;  // Pr√™mio do sortudo

// Interface para incluir o cooldown do sniper
interface UserEconomy {
    coins: number;
    last_daily: number | null;
    mining_chances: number;
    steal_chances: number;
    avenge_chances: number;
    lend_chances: number;
    donate_chances: number;
    casino_chances: number;
    shield: boolean;
    lucky_charm: boolean;
    sniper_cooldown?: number | null;
    lucky_cooldown?: number | null;
}

// Fun√ß√£o para verificar se o usu√°rio est√° em cooldown do sniper
async function checkSniperCooldown(userId: string, groupId: string): Promise<boolean> {
    try {
        const userEconomy = await db.getUserEconomy(groupId, userId);
        
        // Se o usu√°rio n√£o tem economia, cria uma nova
        if (!userEconomy) {
            await db.createUserEconomy(groupId, userId, {
                coins: 0,
                last_daily: null,
                mining_chances: 6,
                steal_chances: 4,
                avenge_chances: 2,
                lend_chances: 2,
                donate_chances: 2,
                casino_chances: 6,
                shield: false,
                lucky_charm: false,
                sniper_cooldown: null,
                lucky_cooldown: null
            });
            return false;
        }

        // Verifica o cooldown
        if (!userEconomy.sniper_cooldown) return false;
        
        const now = Date.now();
        const cooldownTime = 5 * 60 * 1000; // 5 minutos em milissegundos
        
        if (now - userEconomy.sniper_cooldown < cooldownTime) {
            const remainingTime = Math.ceil((cooldownTime - (now - userEconomy.sniper_cooldown)) / 1000);
            throw new Error(`‚è∞ Aguarde ${remainingTime} segundos para usar o sniper novamente!`);
        }

        return false;
    } catch (error) {
        console.error('Erro ao verificar cooldown do sniper:', error);
        throw error;
    }
}

// Fun√ß√£o principal do sniper
async function handleSniper(sock: any, groupId: string, sender: string, userEconomy: UserEconomy, target: string) {
    try {
        if (!target) {
            await sock.sendMessage(groupId, {
                text: `@${sender.split('@')[0]}, use: !sniper @usuario`,
                mentions: [sender]
            });
            return;
        }

        // Limpa o JID e obt√©m metadata do grupo
        target = target.split('@')[0] + '@s.whatsapp.net';
        const groupMetadata = await sock.groupMetadata(groupId);
        const groupName = groupMetadata.subject;

        // Pega informa√ß√µes do usu√°rio do banco de dados
        const targetUserGroup = await db.getUserInGroup(target, groupId);
        const targetName = targetUserGroup?.user_name || target.split('@')[0];

        // Verifica se √© o pr√≥prio usu√°rio
        if (target === sender) {
            await sock.sendMessage(groupId, {
                text: `@${sender.split('@')[0]}, voc√™ n√£o pode atirar em si mesmo!`,
                mentions: [sender]
            });
            return;
        }

        // Verifica se tem coins suficientes
        if (userEconomy.coins < SNIPER_PRICE) {
            await sock.sendMessage(groupId, {
                text: `@${sender.split('@')[0]}, voc√™ precisa de ${SNIPER_PRICE.toLocaleString('pt-BR')} CbCoins para usar o sniper!\nSeu saldo: ${userEconomy.coins.toLocaleString('pt-BR')} CbCoins`,
                mentions: [sender]
            });
            return;
        }

        // Obt√©m ou cria economia do alvo
        let targetEconomy = await db.getUserEconomy(groupId, target);
        
        if (!targetEconomy) {
            targetEconomy = {
                coins: 0,
                last_daily: null,
                mining_chances: MINING_CHANCES,
                steal_chances: STEAL_CHANCES,
                avenge_chances: AVENGE_CHANCES,
                lend_chances: LEND_CHANCES,
                donate_chances: DONATE_CHANCES,
                casino_chances: CASINO_CHANCES,
                shield: false,
                lucky_charm: false,
                sniper_cooldown: null,
                lucky_cooldown: null
            };
            await db.createUserEconomy(groupId, target, targetEconomy);
        }

        // Verifica se o alvo tem escudo
        if (targetEconomy.shield) {
            await sock.sendMessage(groupId, {
                text: `‚ùå @${sender.split('@')[0]}, o alvo @${target.split('@')[0]} est√° protegido por um escudo!`,
                mentions: [sender, target]
            });
            return;
        }

        // Cobra o pre√ßo
        userEconomy.coins -= SNIPER_PRICE;
        await db.updateUserEconomy(groupId, sender, userEconomy);

        // Aplica o cooldown no alvo com informa√ß√µes atualizadas
        const now = Date.now();
        await db.updateUserEconomy(groupId, target, {
            sniper_cooldown: now + SNIPER_COOLDOWN
        });

        // Envia mensagem de sucesso com tempo formatado
        const endTime = new Date(now + SNIPER_COOLDOWN);
        const timeStr = endTime.toLocaleTimeString('pt-BR');
        const dateStr = endTime.toLocaleDateString('pt-BR');

        await sock.sendMessage(groupId, {
            text: `üéØ @${sender.split('@')[0]} acertou @${target.split('@')[0]} com um sniper!\n\n` +
                  `@${target.split('@')[0]} n√£o poder√° jogar at√© ${timeStr} de ${dateStr}!\n\n` +
                  `Saldo de @${sender.split('@')[0]}: ${userEconomy.coins.toLocaleString('pt-BR')} CbCoins`,
            mentions: [sender, target]
        });

    } catch (error) {
        console.error('Erro no comando sniper:', error);
        await sock.sendMessage(groupId, {
            text: '‚ùå Ocorreu um erro ao executar o comando sniper!'
        });
    }
}
=======
import { UserEconomy } from '../types/database';

const DAILY_COINS = 1000;
const MINING_CHANCES = 3;
const STEAL_CHANCES = 2;
const AVENGE_CHANCES = 1;
const LEND_CHANCES = 2;
const DONATE_CHANCES = 3;
const CASINO_CHANCES = 5;
>>>>>>> ff2530683e39c10cacf0f2adeefb6771459bca2b

export async function handleEconomyCommand(
    sock: any,
    message: proto.IWebMessageInfo,
    command: string,
    args: string[]
) {
<<<<<<< HEAD
    console.log('Iniciando handleEconomyCommand:', { command, args });
=======
>>>>>>> ff2530683e39c10cacf0f2adeefb6771459bca2b
    const groupId = message.key.remoteJid;
    if (!groupId.endsWith('@g.us')) {
        await sock.sendMessage(groupId, { text: 'Este comando s√≥ pode ser usado em grupos!' });
        return;
    }

    const sender = message.key.participant || message.key.remoteJid;
<<<<<<< HEAD
    console.log('Dados do comando:', { groupId, sender });

    // Verifica cooldown do sniper antes de processar comandos
    if (command !== '!menu' && command !== '!menucbcoin' && command !== '!helpcbcoin') {
        if (await checkSniperCooldown(sender, groupId)) {
            return;
        }
    }

    // Verifica se o jogo est√° ativo
    if (command !== '!abrirjogo' && !(await db.isGameActive(groupId))) {
        await sock.sendMessage(groupId, { 
            text: 'O jogo est√° fechado neste grupo! Use !abrirjogo para come√ßar.' 
        });
        return;
    }

    // Comandos do menu principal (funcionam sempre)
    if (command.toLowerCase() === '!menu') {
        console.log('Executando comando menu');
        await showMainMenu(sock, groupId);
        return;
    }

    if (command.toLowerCase() === '!comandos') {
        console.log('Executando comando comandos');
        await handleCommands(sock, groupId);
        return;
    }

    // Comandos de controle do jogo (funcionam sempre)
    if (command.toLowerCase() === '!abrirjogo') {
        console.log('Executando comando abrirjogo');
        const group = await db.getGroup(groupId);
        console.log('Dados do grupo:', group);
        if (!group) {
            await db.addGroup(groupId, 'Grupo CbCoin', 0, [sender]);
            await sock.sendMessage(groupId, { text: 'Grupo criado com sucesso!' });
            await db.setGameActive(groupId, true);
            await sock.sendMessage(groupId, { text: 'üéÆ O jogo CbCoin foi aberto! Use !menucbcoin para ver os comandos dispon√≠veis.' });
=======

    // Comandos de controle do jogo
    if (command.toLowerCase() === '!abrirjogo') {
        const group = await db.getGroup(groupId);
        if (!group) {
            await sock.sendMessage(groupId, { text: 'Grupo n√£o encontrado!' });
>>>>>>> ff2530683e39c10cacf0f2adeefb6771459bca2b
            return;
        }

        const admins = group.admins || [];
        if (!admins.includes(sender)) {
            await sock.sendMessage(groupId, { text: 'Apenas administradores podem abrir o jogo!' });
            return;
        }

        await db.setGameActive(groupId, true);
<<<<<<< HEAD
        await sock.sendMessage(groupId, { text: 'üéÆ O jogo CbCoin foi aberto! Use !menucbcoin para ver os comandos dispon√≠veis.' });
=======
        await sock.sendMessage(groupId, { text: 'üéÆ O jogo CbCoin foi aberto! Use !menu para ver os comandos dispon√≠veis.' });
>>>>>>> ff2530683e39c10cacf0f2adeefb6771459bca2b
        return;
    }

    if (command.toLowerCase() === '!fecharjogo') {
        const group = await db.getGroup(groupId);
        if (!group) {
            await sock.sendMessage(groupId, { text: 'Grupo n√£o encontrado!' });
            return;
        }

        const admins = group.admins || [];
        if (!admins.includes(sender)) {
            await sock.sendMessage(groupId, { text: 'Apenas administradores podem fechar o jogo!' });
            return;
        }

        await db.setGameActive(groupId, false);
        await sock.sendMessage(groupId, { text: 'üéÆ O jogo CbCoin foi fechado!' });
        return;
    }

<<<<<<< HEAD
    // Verifica se √© um comando do jogo
    if (isCbCoinCommand(command)) {
        console.log('Comando CbCoin v√°lido:', command);
        // Verifica se o jogo est√° ativo
        const isGameActive = await db.isGameActive(groupId);
        console.log('Status do jogo:', { groupId, isGameActive });
        if (!isGameActive) {
            await sock.sendMessage(groupId, { text: 'üéÆ O jogo CbCoin est√° fechado! Use !abrirjogo para come√ßar a jogar.' });
            return;
        }

        let userEconomy = await db.getUserEconomy(groupId, sender);
        console.log('Dados do usu√°rio:', userEconomy);

        if (!userEconomy) {
            userEconomy = {
                coins: 0,
                last_daily: null,  // Permite pegar o daily imediatamente
                mining_chances: MINING_CHANCES,
                steal_chances: STEAL_CHANCES,
                avenge_chances: AVENGE_CHANCES,
                lend_chances: LEND_CHANCES,
                donate_chances: DONATE_CHANCES,
                casino_chances: CASINO_CHANCES,
                shield: false,
                lucky_charm: false
            };
            await db.createUserEconomy(groupId, sender, userEconomy);
        }

        // Processa comandos do jogo
        switch (command.toLowerCase()) {
            case '!menucbcoin':
                await showCbCoinMenu(sock, groupId);
                break;
            case '!helpcbcoin':
                await handleHelpCbCoin(sock, groupId);
                break;
            case '!diario':
                await handleDaily(sock, groupId, sender, userEconomy);
                break;
            case '!minerar':
                await handleMining(sock, groupId, sender, userEconomy);
                break;
            case '!roubar':
                await handleSteal(sock, groupId, sender, userEconomy, args[0]);
                break;
            case '!vingar':
                await handleAvenge(sock, groupId, sender, userEconomy, args[0]);
                break;
            case '!emprestar':
                await handleLend(sock, groupId, sender, userEconomy, args[0], args[1]);
                break;
            case '!doar':
                await handleDonate(sock, groupId, sender, userEconomy, args[0], args[1]);
                break;
            case '!cassino':
                await handleCasino(sock, groupId, sender, userEconomy, args[0]);
                break;
            case '!escudo':
                await handleShield(sock, groupId, sender, userEconomy);
                break;
            case '!amuletosorte':
                await handleLuckyCharm(sock, groupId, sender, userEconomy);
                break;
            case '!ranking':
                await handleRanking(sock, groupId);
                break;
            case '!perfil':
                await handleProfile(sock, groupId, sender, userEconomy);
                break;
            case '!sniper':
                await handleSniper(sock, groupId, sender, userEconomy, args[0]);
                break;
            case '!sortudo':
                await handleLucky(sock, groupId, sender, userEconomy);
                break;
            default:
                await showCbCoinMenu(sock, groupId);
        }
    } else {
        console.log('Comando n√£o reconhecido:', command);
    }
}

// Fun√ß√£o auxiliar para verificar se √© um comando do jogo
function isCbCoinCommand(command: string): boolean {
    const cbCoinCommands = [
        '!menucbcoin',
        '!helpcbcoin',
        '!diario',
        '!minerar',
        '!roubar',
        '!vingar',
        '!emprestar',
        '!doar',
        '!cassino',
        '!escudo',
        '!amuletosorte',
        '!ranking',
        '!perfil'
    ];
    return cbCoinCommands.includes(command.toLowerCase());
}

// Menu principal do bot (sempre dispon√≠vel)
async function showMainMenu(sock: any, groupId: string) {
    const text = `*ü§ñ Menu Principal do Bot ü§ñ*

*Comandos Dispon√≠veis:*
!menu - Mostra este menu
!abrirjogo - Abre o jogo CbCoin (admin)
!fecharjogo - Fecha o jogo CbCoin (admin)
!menucbcoin - Menu do jogo CbCoin
!helpcbcoin - Informa√ß√µes sobre o CbCoin`;

    await sock.sendMessage(groupId, { text });
=======
    // Verifica se o jogo est√° ativo para outros comandos
    const isGameActive = await db.isGameActive(groupId);
    if (!isGameActive) {
        await sock.sendMessage(groupId, { text: 'üéÆ O jogo CbCoin est√° fechado! Use !abrirjogo para come√ßar a jogar.' });
        return;
    }

    let userEconomy = await db.getUserEconomy(groupId, sender);

    if (!userEconomy) {
        userEconomy = {
            coins: 0,
            last_daily: 0,
            mining_chances: MINING_CHANCES,
            steal_chances: STEAL_CHANCES,
            avenge_chances: AVENGE_CHANCES,
            lend_chances: LEND_CHANCES,
            donate_chances: DONATE_CHANCES,
            casino_chances: CASINO_CHANCES,
            shield: false,
            lucky_charm: false
        };
        await db.createUserEconomy(groupId, sender, userEconomy);
    }

    switch (command.toLowerCase()) {
        case '!menucbcoin':
            await showCbCoinMenu(sock, groupId);
            break;
        case '!menu':
            await showEconomyMenu(sock, groupId);
            break;
        case '!diario':
            await handleDaily(sock, groupId, sender, userEconomy);
            break;
        case '!minerar':
            await handleMining(sock, groupId, sender, userEconomy);
            break;
        case '!roubar':
            await handleSteal(sock, groupId, sender, userEconomy, args[0]);
            break;
        case '!vingar':
            await handleAvenge(sock, groupId, sender, userEconomy, args[0]);
            break;
        case '!emprestar':
            await handleLend(sock, groupId, sender, userEconomy, args[0], args[1]);
            break;
        case '!doar':
            await handleDonate(sock, groupId, sender, userEconomy, args[0], args[1]);
            break;
        case '!casino':
            await handleCasino(sock, groupId, sender, userEconomy, args[0]);
            break;
        case '!escudo':
            await handleShield(sock, groupId, sender, userEconomy);
            break;
        case '!amuletosorte':
            await handleLuckyCharm(sock, groupId, sender, userEconomy);
            break;
        case '!ranking':
            await handleRanking(sock, groupId);
            break;
        case '!perfil':
            await handleProfile(sock, groupId, sender, userEconomy);
            break;
        default:
            await showEconomyMenu(sock, groupId);
    }
>>>>>>> ff2530683e39c10cacf0f2adeefb6771459bca2b
}

async function handleDaily(sock: any, groupId: string, sender: string, userEconomy: UserEconomy) {
    const now = Date.now();
    const lastDaily = userEconomy.last_daily;
    const oneDay = 24 * 60 * 60 * 1000;

    if (now - lastDaily < oneDay) {
        const timeLeft = oneDay - (now - lastDaily);
        const hoursLeft = Math.ceil(timeLeft / (60 * 60 * 1000));
        await sock.sendMessage(groupId, {
<<<<<<< HEAD
            text: `@${sender.split('@')[0]}, voc√™ precisa esperar ${hoursLeft} horas para receber sua recompensa di√°ria novamente!`,
            mentions: [sender]
=======
            text: `Voc√™ precisa esperar ${hoursLeft} horas para receber sua recompensa di√°ria novamente!`
>>>>>>> ff2530683e39c10cacf0f2adeefb6771459bca2b
        });
        return;
    }

    userEconomy.coins += DAILY_COINS;
    userEconomy.last_daily = now;
    userEconomy.mining_chances = MINING_CHANCES;
    userEconomy.steal_chances = STEAL_CHANCES;
    userEconomy.avenge_chances = AVENGE_CHANCES;
    userEconomy.lend_chances = LEND_CHANCES;
    userEconomy.donate_chances = DONATE_CHANCES;
    userEconomy.casino_chances = CASINO_CHANCES;

    await db.updateUserEconomy(groupId, sender, userEconomy);

    await sock.sendMessage(groupId, {
<<<<<<< HEAD
        text: `@${sender.split('@')[0]} recebeu ${DAILY_COINS} CbCoins como recompensa di√°ria!\nSaldo atual: ${userEconomy.coins} CbCoins`,
        mentions: [sender]
=======
        text: `Voc√™ recebeu ${DAILY_COINS} CbCoins como sua recompensa di√°ria!\nSeu saldo atual: ${userEconomy.coins} CbCoins`
>>>>>>> ff2530683e39c10cacf0f2adeefb6771459bca2b
    });
}

async function handleMining(sock: any, groupId: string, sender: string, userEconomy: UserEconomy) {
    if (userEconomy.mining_chances <= 0) {
        await sock.sendMessage(groupId, {
<<<<<<< HEAD
            text: `@${sender.split('@')[0]}, voc√™ n√£o tem mais chances de minerar hoje!`,
            mentions: [sender]
=======
            text: 'Voc√™ n√£o tem mais chances de minerar hoje!'
>>>>>>> ff2530683e39c10cacf0f2adeefb6771459bca2b
        });
        return;
    }

    const success = getRandomNumber(1, 100) <= 70;
    const coins = success ? getRandomNumber(100, 500) : 0;

    userEconomy.mining_chances--;
    if (success) {
        userEconomy.coins += coins;
    }

    await db.updateUserEconomy(groupId, sender, userEconomy);

    await sock.sendMessage(groupId, {
        text: success
<<<<<<< HEAD
            ? `@${sender.split('@')[0]} minerou com sucesso e ganhou ${coins} CbCoins!\nChances restantes: ${userEconomy.mining_chances}`
            : `@${sender.split('@')[0]} falhou na minera√ß√£o!\nChances restantes: ${userEconomy.mining_chances}`,
        mentions: [sender]
=======
            ? `Mineragem bem sucedida! Voc√™ ganhou ${coins} CbCoins!\nChances restantes: ${userEconomy.mining_chances}`
            : `Mineragem falhou! Tente novamente!\nChances restantes: ${userEconomy.mining_chances}`
>>>>>>> ff2530683e39c10cacf0f2adeefb6771459bca2b
    });
}

async function handleSteal(sock: any, groupId: string, sender: string, userEconomy: UserEconomy, target: string) {
    if (!target) {
        await sock.sendMessage(groupId, {
<<<<<<< HEAD
            text: `@${sender.split('@')[0]}, mencione o usu√°rio que voc√™ quer roubar!`,
            mentions: [sender]
        });
        return;
    }

    // Limpa o JID se necess√°rio
    target = target.split('@')[0] + '@s.whatsapp.net';

    if (target === sender) {
        await sock.sendMessage(groupId, {
            text: `@${sender.split('@')[0]}, voc√™ n√£o pode roubar de si mesmo!`,
            mentions: [sender]
=======
            text: 'Mencione o usu√°rio que voc√™ quer roubar!'
>>>>>>> ff2530683e39c10cacf0f2adeefb6771459bca2b
        });
        return;
    }

    if (userEconomy.steal_chances <= 0) {
        await sock.sendMessage(groupId, {
            text: 'Voc√™ n√£o tem mais chances de roubar hoje!'
        });
        return;
    }

    const targetEconomy = await db.getUserEconomy(groupId, target);
    if (!targetEconomy) {
        await sock.sendMessage(groupId, {
            text: 'Usu√°rio n√£o encontrado!'
        });
        return;
    }

    if (targetEconomy.shield) {
        userEconomy.steal_chances--;
        await db.updateUserEconomy(groupId, sender, userEconomy);
        await sock.sendMessage(groupId, {
<<<<<<< HEAD
            text: 'O usu√°rio est√° protegido por um escudo!',
            mentions: [target]
=======
            text: 'O usu√°rio est√° protegido por um escudo!'
>>>>>>> ff2530683e39c10cacf0f2adeefb6771459bca2b
        });
        return;
    }

    const success = getRandomNumber(1, 100) <= 30;
    const coins = success ? Math.floor(targetEconomy.coins * 0.1) : 0;

    userEconomy.steal_chances--;
    if (success) {
        userEconomy.coins += coins;
        targetEconomy.coins -= coins;
    }

    await db.updateUserEconomy(groupId, sender, userEconomy);
    await db.updateUserEconomy(groupId, target, targetEconomy);

    await sock.sendMessage(groupId, {
        text: success
<<<<<<< HEAD
            ? `@${sender.split('@')[0]} roubou ${coins} CbCoins de @${target.split('@')[0]}!\nChances restantes: ${userEconomy.steal_chances}`
            : `@${sender.split('@')[0]} tentou roubar @${target.split('@')[0]} mas falhou!\nChances restantes: ${userEconomy.steal_chances}`,
        mentions: [sender, target]
=======
            ? `Roubo bem sucedido! Voc√™ roubou ${coins} CbCoins!\nChances restantes: ${userEconomy.steal_chances}`
            : `Roubo falhou! Tente novamente!\nChances restantes: ${userEconomy.steal_chances}`
>>>>>>> ff2530683e39c10cacf0f2adeefb6771459bca2b
    });
}

async function handleAvenge(sock: any, groupId: string, sender: string, userEconomy: UserEconomy, target: string) {
    if (!target) {
        await sock.sendMessage(groupId, {
            text: 'Mencione o usu√°rio que voc√™ quer se vingar!'
        });
        return;
    }

<<<<<<< HEAD
    // Limpa o JID se necess√°rio
    target = target.split('@')[0] + '@s.whatsapp.net';

    if (target === sender) {
        await sock.sendMessage(groupId, {
            text: 'Voc√™ n√£o pode se vingar de si mesmo!'
        });
        return;
    }

=======
>>>>>>> ff2530683e39c10cacf0f2adeefb6771459bca2b
    if (userEconomy.avenge_chances <= 0) {
        await sock.sendMessage(groupId, {
            text: 'Voc√™ n√£o tem mais chances de se vingar hoje!'
        });
        return;
    }

    const targetEconomy = await db.getUserEconomy(groupId, target);
    if (!targetEconomy) {
        await sock.sendMessage(groupId, {
            text: 'Usu√°rio n√£o encontrado!'
        });
        return;
    }

    const success = getRandomNumber(1, 100) <= 50;
    const coins = success ? Math.floor(targetEconomy.coins * 0.2) : 0;

    userEconomy.avenge_chances--;
    if (success) {
        userEconomy.coins += coins;
        targetEconomy.coins -= coins;
    }

    await db.updateUserEconomy(groupId, sender, userEconomy);
    await db.updateUserEconomy(groupId, target, targetEconomy);

    await sock.sendMessage(groupId, {
        text: success
<<<<<<< HEAD
            ? `Vingan√ßa bem sucedida! Voc√™ roubou ${coins} CbCoins de @${target.split('@')[0]}!\nChances restantes: ${userEconomy.avenge_chances}`
            : `Vingan√ßa falhou! Tente novamente!\nChances restantes: ${userEconomy.avenge_chances}`,
        mentions: [target]
=======
            ? `Vingan√ßa bem sucedida! Voc√™ roubou ${coins} CbCoins!\nChances restantes: ${userEconomy.avenge_chances}`
            : `Vingan√ßa falhou! Tente novamente!\nChances restantes: ${userEconomy.avenge_chances}`
>>>>>>> ff2530683e39c10cacf0f2adeefb6771459bca2b
    });
}

async function handleLend(sock: any, groupId: string, sender: string, userEconomy: UserEconomy, target: string, amount: string) {
    if (!target || !amount) {
        await sock.sendMessage(groupId, {
<<<<<<< HEAD
            text: `@${sender.split('@')[0]}, use: !emprestar @usuario [quantidade]`,
            mentions: [sender]
=======
            text: 'Mencione o usu√°rio e a quantidade que voc√™ quer emprestar!'
>>>>>>> ff2530683e39c10cacf0f2adeefb6771459bca2b
        });
        return;
    }

<<<<<<< HEAD
    // Limpa o JID se necess√°rio
    target = target.split('@')[0] + '@s.whatsapp.net';

    if (target === sender) {
        await sock.sendMessage(groupId, {
            text: `@${sender.split('@')[0]}, voc√™ n√£o pode emprestar para si mesmo!`,
            mentions: [sender]
=======
    if (userEconomy.lend_chances <= 0) {
        await sock.sendMessage(groupId, {
            text: 'Voc√™ n√£o tem mais chances de emprestar hoje!'
>>>>>>> ff2530683e39c10cacf0f2adeefb6771459bca2b
        });
        return;
    }

    const coins = parseInt(amount);
    if (isNaN(coins) || coins <= 0) {
        await sock.sendMessage(groupId, {
<<<<<<< HEAD
            text: `@${sender.split('@')[0]}, valor inv√°lido!`,
            mentions: [sender]
=======
            text: 'Quantidade inv√°lida!'
>>>>>>> ff2530683e39c10cacf0f2adeefb6771459bca2b
        });
        return;
    }

<<<<<<< HEAD
    if (coins > userEconomy.coins) {
        await sock.sendMessage(groupId, {
            text: `@${sender.split('@')[0]}, voc√™ n√£o tem CbCoins suficientes!\nSeu saldo: ${userEconomy.coins.toLocaleString('pt-BR')} CbCoins`,
            mentions: [sender]
=======
    if (userEconomy.coins < coins) {
        await sock.sendMessage(groupId, {
            text: 'Voc√™ n√£o tem CbCoins suficientes!'
>>>>>>> ff2530683e39c10cacf0f2adeefb6771459bca2b
        });
        return;
    }

<<<<<<< HEAD
    // Atualiza os saldos
    userEconomy.coins -= coins;
    await db.updateUserEconomy(groupId, sender, userEconomy);

    let targetEconomy = await db.getUserEconomy(groupId, target);
    if (!targetEconomy) {
        targetEconomy = {
            coins: 0,
            last_daily: null,
            mining_chances: MINING_CHANCES,
            steal_chances: STEAL_CHANCES,
            avenge_chances: AVENGE_CHANCES,
            lend_chances: LEND_CHANCES,
            donate_chances: DONATE_CHANCES,
            casino_chances: CASINO_CHANCES,
            shield: false,
            lucky_charm: false
        };
        await db.createUserEconomy(groupId, target, targetEconomy);
    }
    targetEconomy.coins += coins;
    await db.updateUserEconomy(groupId, target, targetEconomy);

    await sock.sendMessage(groupId, {
        text: `üí∏ @${sender.split('@')[0]} emprestou ${coins.toLocaleString('pt-BR')} CbCoins para @${target.split('@')[0]}!\nSaldo de @${sender.split('@')[0]}: ${userEconomy.coins.toLocaleString('pt-BR')} CbCoins`,
        mentions: [sender, target]
=======
    const targetEconomy = await db.getUserEconomy(groupId, target);
    if (!targetEconomy) {
        await sock.sendMessage(groupId, {
            text: 'Usu√°rio n√£o encontrado!'
        });
        return;
    }

    userEconomy.lend_chances--;
    userEconomy.coins -= coins;
    targetEconomy.coins += coins;

    await db.updateUserEconomy(groupId, sender, userEconomy);
    await db.updateUserEconomy(groupId, target, targetEconomy);

    await sock.sendMessage(groupId, {
        text: `Voc√™ emprestou ${coins} CbCoins para ${target}!\nChances restantes: ${userEconomy.lend_chances}`
>>>>>>> ff2530683e39c10cacf0f2adeefb6771459bca2b
    });
}

async function handleDonate(sock: any, groupId: string, sender: string, userEconomy: UserEconomy, target: string, amount: string) {
    if (!target || !amount) {
        await sock.sendMessage(groupId, {
<<<<<<< HEAD
            text: `@${sender.split('@')[0]}, use: !doar @usuario [quantidade]`,
            mentions: [sender]
=======
            text: 'Mencione o usu√°rio e a quantidade que voc√™ quer doar!'
>>>>>>> ff2530683e39c10cacf0f2adeefb6771459bca2b
        });
        return;
    }

<<<<<<< HEAD
    // Limpa o JID se necess√°rio
    target = target.split('@')[0] + '@s.whatsapp.net';

    if (target === sender) {
        await sock.sendMessage(groupId, {
            text: `@${sender.split('@')[0]}, voc√™ n√£o pode doar para si mesmo!`,
            mentions: [sender]
=======
    if (userEconomy.donate_chances <= 0) {
        await sock.sendMessage(groupId, {
            text: 'Voc√™ n√£o tem mais chances de doar hoje!'
>>>>>>> ff2530683e39c10cacf0f2adeefb6771459bca2b
        });
        return;
    }

    const coins = parseInt(amount);
    if (isNaN(coins) || coins <= 0) {
        await sock.sendMessage(groupId, {
<<<<<<< HEAD
            text: `@${sender.split('@')[0]}, valor inv√°lido!`,
            mentions: [sender]
=======
            text: 'Quantidade inv√°lida!'
>>>>>>> ff2530683e39c10cacf0f2adeefb6771459bca2b
        });
        return;
    }

<<<<<<< HEAD
    if (coins > userEconomy.coins) {
        await sock.sendMessage(groupId, {
            text: `@${sender.split('@')[0]}, voc√™ n√£o tem CbCoins suficientes!\nSeu saldo: ${userEconomy.coins.toLocaleString('pt-BR')} CbCoins`,
            mentions: [sender]
=======
    if (userEconomy.coins < coins) {
        await sock.sendMessage(groupId, {
            text: 'Voc√™ n√£o tem CbCoins suficientes!'
>>>>>>> ff2530683e39c10cacf0f2adeefb6771459bca2b
        });
        return;
    }

<<<<<<< HEAD
    // Atualiza os saldos
    userEconomy.coins -= coins;
    await db.updateUserEconomy(groupId, sender, userEconomy);

    let targetEconomy = await db.getUserEconomy(groupId, target);
    if (!targetEconomy) {
        targetEconomy = {
            coins: 0,
            last_daily: null,
            mining_chances: MINING_CHANCES,
            steal_chances: STEAL_CHANCES,
            avenge_chances: AVENGE_CHANCES,
            lend_chances: LEND_CHANCES,
            donate_chances: DONATE_CHANCES,
            casino_chances: CASINO_CHANCES,
            shield: false,
            lucky_charm: false
        };
        await db.createUserEconomy(groupId, target, targetEconomy);
    }
    targetEconomy.coins += coins;
    await db.updateUserEconomy(groupId, target, targetEconomy);

    await sock.sendMessage(groupId, {
        text: `üéÅ @${sender.split('@')[0]} doou ${coins.toLocaleString('pt-BR')} CbCoins para @${target.split('@')[0]}!\nSaldo de @${sender.split('@')[0]}: ${userEconomy.coins.toLocaleString('pt-BR')} CbCoins`,
        mentions: [sender, target]
    });
}

// Configura√ß√µes do cassino
const CASINO_CONFIG = {
    multipliers: [
        { value: 10, chance: 0.01, message: 'üåü JACKPOT!!! Voc√™ ganhou {amount} CBcoins (10x)!' },
        { value: 5, chance: 0.04, message: 'üéØ EXTRAORDIN√ÅRIO! Voc√™ ganhou {amount} CBcoins (5x)!' },
        { value: 3, chance: 0.15, message: 'üé∞ INCR√çVEL! Voc√™ ganhou {amount} CBcoins (3x)!' },
        { value: 2, chance: 0.30, message: 'üí∞ Parab√©ns! Voc√™ ganhou {amount} CBcoins (2x)!' },
        { value: 1, chance: 0.50, message: 'üìâ Voc√™ perdeu {amount} CBcoins!' }
    ]
};

async function handleCasino(sock: any, groupId: string, sender: string, userEconomy: UserEconomy, betAmount: string) {
    try {
        // Verifica chances dispon√≠veis
        if (userEconomy.casino_chances <= 0) {
            await sock.sendMessage(groupId, {
                text: `@${sender.split('@')[0]}, voc√™ n√£o tem mais chances de apostar hoje!`,
                mentions: [sender]
            });
            return;
        }

        // Valida e converte a aposta
        const bet = parseInt(betAmount);
        if (isNaN(bet) || bet <= 0) {
            await sock.sendMessage(groupId, {
                text: `@${sender.split('@')[0]}, valor inv√°lido! Use: !cassino <valor>`,
                mentions: [sender]
            });
            return;
        }

        // Verifica saldo
        if (userEconomy.coins < bet) {
            await sock.sendMessage(groupId, {
                text: `@${sender.split('@')[0]}, voc√™ n√£o tem CBcoins suficientes!\nSeu saldo: ${userEconomy.coins.toLocaleString('pt-BR')} CBcoins`,
                mentions: [sender]
            });
            return;
        }

        // Processa a aposta
        const random = Math.random();
        let accumulatedChance = 0;
        let result = CASINO_CONFIG.multipliers[CASINO_CONFIG.multipliers.length - 1]; // Default para perda

        for (const multiplier of CASINO_CONFIG.multipliers) {
            accumulatedChance += multiplier.chance;
            if (random <= accumulatedChance) {
                result = multiplier;
                break;
            }
        }

        // Calcula resultado
        const finalAmount = result.value === 1 ? -bet : bet * (result.value - 1);
        
        // Atualiza economia
        userEconomy.coins += finalAmount;
        userEconomy.casino_chances--;

        await db.updateUserEconomy(groupId, sender, {
            coins: userEconomy.coins,
            casino_chances: userEconomy.casino_chances
        });

        // Envia resultado
        const message = result.message.replace('{amount}', Math.abs(finalAmount).toLocaleString('pt-BR')) +
            `\nSaldo atual: ${userEconomy.coins.toLocaleString('pt-BR')} CBcoins` +
            `\nChances restantes: ${userEconomy.casino_chances}`;

        await sock.sendMessage(groupId, {
            text: message,
            mentions: [sender]
        });

    } catch (error) {
        console.error('Erro no cassino:', error);
        await sock.sendMessage(groupId, {
            text: '‚ùå Ocorreu um erro ao processar sua aposta!',
            mentions: [sender]
        });
    }
}

async function handleShield(sock: any, groupId: string, sender: string, userEconomy: UserEconomy) {
    const price = SHIELD_PRICE;
    
    if (userEconomy.shield) {
        await sock.sendMessage(groupId, {
            text: '‚ùå Voc√™ j√° possui um escudo ativo!'
=======
    const targetEconomy = await db.getUserEconomy(groupId, target);
    if (!targetEconomy) {
        await sock.sendMessage(groupId, {
            text: 'Usu√°rio n√£o encontrado!'
        });
        return;
    }

    userEconomy.donate_chances--;
    userEconomy.coins -= coins;
    targetEconomy.coins += coins;

    await db.updateUserEconomy(groupId, sender, userEconomy);
    await db.updateUserEconomy(groupId, target, targetEconomy);

    await sock.sendMessage(groupId, {
        text: `Voc√™ doou ${coins} CbCoins para ${target}!\nChances restantes: ${userEconomy.donate_chances}`
    });
}

async function handleCasino(sock: any, groupId: string, sender: string, userEconomy: UserEconomy, bet: string) {
    if (!bet) {
        await sock.sendMessage(groupId, {
            text: 'Digite a quantidade que voc√™ quer apostar!'
>>>>>>> ff2530683e39c10cacf0f2adeefb6771459bca2b
        });
        return;
    }

<<<<<<< HEAD
    if (userEconomy.coins < price) {
        await sock.sendMessage(groupId, {
            text: `‚ùå Voc√™ precisa de ${price} CbCoins para comprar um escudo!\nSeu saldo: ${userEconomy.coins} CbCoins`
=======
    if (userEconomy.casino_chances <= 0) {
        await sock.sendMessage(groupId, {
            text: 'Voc√™ n√£o tem mais chances de jogar no casino hoje!'
>>>>>>> ff2530683e39c10cacf0f2adeefb6771459bca2b
        });
        return;
    }

<<<<<<< HEAD
    userEconomy.coins -= price;
    userEconomy.shield = true;
    await db.updateUserEconomy(groupId, sender, userEconomy);

    await sock.sendMessage(groupId, {
        text: `‚úÖ Voc√™ comprou um escudo por ${price} CbCoins!\nSeu saldo atual: ${userEconomy.coins} CbCoins`
=======
    const coins = parseInt(bet);
    if (isNaN(coins) || coins <= 0) {
        await sock.sendMessage(groupId, {
            text: 'Quantidade inv√°lida!'
        });
        return;
    }

    if (userEconomy.coins < coins) {
        await sock.sendMessage(groupId, {
            text: 'Voc√™ n√£o tem CbCoins suficientes!'
        });
        return;
    }

    const success = getRandomNumber(1, 100) <= 40;
    const multiplier = success ? getRandomNumber(1, 3) : 0;

    userEconomy.casino_chances--;
    if (success) {
        userEconomy.coins += coins * multiplier;
    } else {
        userEconomy.coins -= coins;
    }

    await db.updateUserEconomy(groupId, sender, userEconomy);

    await sock.sendMessage(groupId, {
        text: success
            ? `Voc√™ ganhou ${coins * multiplier} CbCoins! (${multiplier}x)\nChances restantes: ${userEconomy.casino_chances}`
            : `Voc√™ perdeu ${coins} CbCoins!\nChances restantes: ${userEconomy.casino_chances}`
    });
}

async function handleShield(sock: any, groupId: string, sender: string, userEconomy: UserEconomy) {
    if (userEconomy.shield) {
        await sock.sendMessage(groupId, {
            text: 'Voc√™ j√° est√° protegido por um escudo!'
        });
        return;
    }

    const shieldCost = 5000;
    if (userEconomy.coins < shieldCost) {
        await sock.sendMessage(groupId, {
            text: `Voc√™ precisa de ${shieldCost} CbCoins para comprar um escudo!`
        });
        return;
    }

    userEconomy.coins -= shieldCost;
    userEconomy.shield = true;

    await db.updateUserEconomy(groupId, sender, userEconomy);

    await sock.sendMessage(groupId, {
        text: `Voc√™ comprou um escudo por ${shieldCost} CbCoins!\nAgora voc√™ est√° protegido contra roubos!`
>>>>>>> ff2530683e39c10cacf0f2adeefb6771459bca2b
    });
}

async function handleLuckyCharm(sock: any, groupId: string, sender: string, userEconomy: UserEconomy) {
    if (userEconomy.lucky_charm) {
        await sock.sendMessage(groupId, {
            text: 'Voc√™ j√° tem um amuleto da sorte!'
        });
        return;
    }

<<<<<<< HEAD
    const charmCost = LUCKY_CHARM_PRICE;
=======
    const charmCost = 3000;
>>>>>>> ff2530683e39c10cacf0f2adeefb6771459bca2b
    if (userEconomy.coins < charmCost) {
        await sock.sendMessage(groupId, {
            text: `Voc√™ precisa de ${charmCost} CbCoins para comprar um amuleto da sorte!`
        });
        return;
    }

    userEconomy.coins -= charmCost;
    userEconomy.lucky_charm = true;

    await db.updateUserEconomy(groupId, sender, userEconomy);

    await sock.sendMessage(groupId, {
        text: `Voc√™ comprou um amuleto da sorte por ${charmCost} CbCoins!\nAgora suas chances de sucesso aumentaram!`
    });
}

async function handleRanking(sock: any, groupId: string) {
    const ranking = await db.getGroupEconomyRanking(groupId);
<<<<<<< HEAD
    const mentions = ranking.map(user => user.user_id);

    let text = `‚ï≠‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïÆ
    ‚îÉ üèÜ *RANKING CBCOIN* üèÜ
    ‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïØ\n\n`;

    for (let i = 0; i < ranking.length; i++) {
        const user = ranking[i];
        // Emojis para as posi√ß√µes
        const position = i === 0 ? 'üëë' : i === 1 ? 'ü•à' : i === 2 ? 'ü•â' : 'üéÆ';
        
        // Formata o n√∫mero com pontos para milhares
        const formattedCoins = user.coins.toLocaleString('pt-BR');
        
        // Adiciona @ para criar a men√ß√£o e usa o n√∫mero do WhatsApp
        const userNumber = user.user_id.split('@')[0];
        text += `${position} ${i + 1}¬∫ @${userNumber}\n`;
        text += `‚îÉ    üí∞ ${formattedCoins} CbCoins\n`;
        if (i < ranking.length - 1) text += `‚îÉ\n`;
    }

    text += `\n‚ï≠‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïÆ
    ‚îÉ üëë *TOP 10 PLAYERS* üëë
    ‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïØ`;

    await sock.sendMessage(groupId, { 
        text,
        mentions // Adiciona o array de men√ß√µes
    });
}

async function handleHelpCbCoin(sock: any, groupId: string) {
    const text = `*üéÆ O QUE √â O CBCOIN? üéÆ*

*Sobre o CbCoin:*
CbCoin √© a moeda oficial do Calabou√ßo! Com ela, voc√™ pode participar de v√°rias atividades divertidas e interativas no grupo.

*üåü O que voc√™ pode fazer:*
1. üí∞ *Ganhar moedas:*
   ‚Ä¢ Coletar recompensa di√°ria (1000 CbCoins)
   ‚Ä¢ Minerar CbCoins (70% de chance de sucesso)
   ‚Ä¢ Jogar no cassino e multiplicar seus ganhos

2. ü§ù *Interagir com outros jogadores:*
   ‚Ä¢ Roubar CbCoins de outros jogadores
   ‚Ä¢ Se vingar de quem te roubou
   ‚Ä¢ Emprestar moedas para amigos
   ‚Ä¢ Fazer doa√ß√µes
   ‚Ä¢ Competir no ranking

3. üõ°Ô∏è *Itens especiais:*
   ‚Ä¢ Comprar escudo para prote√ß√£o contra roubos
   ‚Ä¢ Adquirir amuleto da sorte para aumentar chances

*‚öôÔ∏è Como funciona:*
‚Ä¢ Cada grupo tem sua pr√≥pria economia
‚Ä¢ As chances s√£o renovadas diariamente
‚Ä¢ Voc√™ pode ver seu progresso com !perfil
‚Ä¢ Acompanhe os mais ricos com !ranking

*üí° Dicas importantes:*
‚Ä¢ Comece coletando sua recompensa di√°ria
‚Ä¢ Minere regularmente para acumular moedas
‚Ä¢ Proteja-se com escudo contra roubos
‚Ä¢ Use o amuleto para aumentar suas chances
‚Ä¢ Participe ativamente para subir no ranking

Use !menucbcoin para ver todos os comandos dispon√≠veis!`;

=======

    let text = '*üèÜ Ranking de CbCoins üèÜ*\n\n';
    for (let i = 0; i < ranking.length; i++) {
        const user = ranking[i];
        text += `${i + 1}. @${user.user_id.split('@')[0]}: ${user.coins} CbCoins\n`;
    }

>>>>>>> ff2530683e39c10cacf0f2adeefb6771459bca2b
    await sock.sendMessage(groupId, { text });
}

async function showCbCoinMenu(sock: any, groupId: string) {
<<<<<<< HEAD
    const text = `üéÆ *Menu CbCoin* üéÆ

*üí∞ Comandos de Economia:*
!diario - Recebe ${DAILY_COINS} CbCoins di√°rios
!minerar - Minera CbCoins (70% de chance)
!roubar @usuario - Rouba CbCoins de algu√©m
!vingar @usuario - Tenta recuperar CbCoins roubados
!emprestar @usuario [valor] - Empresta CbCoins
!doar @usuario [valor] - Doa CbCoins
!cassino [valor] - Tenta multiplicar seus CbCoins
!escudo - Compra prote√ß√£o contra roubos (${SHIELD_PRICE} CbCoins)
!amuletosorte - Aumenta chances de sucesso (${LUCKY_CHARM_PRICE} CbCoins)
!sniper @usuario - Impede algu√©m de jogar por 24h (${SNIPER_PRICE} CbCoins)
!sortudo - Ganha ${LUCKY_PRIZE} CbCoins e marca algu√©m aleat√≥rio (24h cooldown)
!ranking - Mostra o ranking de CbCoins
!perfil - Mostra seu perfil no jogo

*üí° Chances Di√°rias:*
‚õèÔ∏è Minerar: ${MINING_CHANCES}x chances
ü¶π‚Äç‚ôÇÔ∏è Roubar: ${STEAL_CHANCES}x chances
‚öîÔ∏è Vingar: ${AVENGE_CHANCES}x chance
üí∏ Emprestar: ${LEND_CHANCES}x chances
üéÅ Doar: ${DONATE_CHANCES}x chances
üé≤ Cassino: ${CASINO_CHANCES}x chances

*üí° Dicas:*
‚Ä¢ Colete sua recompensa di√°ria
‚Ä¢ Minere para ganhar mais CbCoins
‚Ä¢ Use o escudo para se proteger
‚Ä¢ Ajude outros jogadores com doa√ß√µes
‚Ä¢ Jogue no cassino com modera√ß√£o

*‚ö†Ô∏è Observa√ß√µes:*
‚Ä¢ As chances s√£o resetadas diariamente
‚Ä¢ O escudo protege contra roubos e sniper
‚Ä¢ O amuleto aumenta chances de sucesso
‚Ä¢ Seja ativo para ganhar mais CbCoins`;
=======
    const text = `*üéÆ SISTEMA CBCOIN üéÆ*

*Como Jogar:*
1. Use !abrirjogo para iniciar o jogo (apenas admins)
2. Todos os membros podem participar
3. Use !perfil para ver suas informa√ß√µes
4. Use !ranking para ver o top 10 mais ricos

*üí∞ Comandos B√°sicos:*
!diario - Receba 1000 CbCoins por dia
!minerar - Tente minerar CbCoins (70% de sucesso)
!roubar @usuario - Tente roubar 10% dos CbCoins de algu√©m (30% de sucesso)
!vingar @usuario - Tente se vingar e roubar 20% dos CbCoins (50% de sucesso)
!emprestar @usuario [quantidade] - Empreste CbCoins para algu√©m
!doar @usuario [quantidade] - Doe CbCoins para algu√©m
!casino [aposta] - Jogue no casino (40% de sucesso, multiplicador 1x-3x)

*üéØ Chances Di√°rias:*
‚õèÔ∏è Minerar: 3x chances
ü¶π Roubar: 2x chances
‚öîÔ∏è Vingar: 1x chance
üí∏ Emprestar: 2x chances
üéÅ Doar: 3x chances
üé≤ Casino: 5x chances

*üõ°Ô∏è Itens de Prote√ß√£o:*
!escudo - Custa 5000 CbCoins
‚Ä¢ Protege contra roubos
‚Ä¢ Dura at√© ser desativado

*üçÄ Itens de Sorte:*
!amuletosorte - Custa 3000 CbCoins
‚Ä¢ Aumenta chances de sucesso
‚Ä¢ Dura at√© ser desativado

*üìä Informa√ß√µes:*
‚Ä¢ Cada grupo tem seu pr√≥prio sistema
‚Ä¢ As chances s√£o resetadas diariamente
‚Ä¢ Use !perfil para ver suas informa√ß√µes
‚Ä¢ Use !ranking para ver os mais ricos

*‚ö†Ô∏è Dicas:*
‚Ä¢ Colete sua recompensa di√°ria primeiro
‚Ä¢ Use o escudo para se proteger de roubos
‚Ä¢ Use o amuleto da sorte para aumentar chances
‚Ä¢ Jogue no casino com modera√ß√£o
‚Ä¢ Ajude outros jogadores com doa√ß√µes

*üéÆ Comandos de Controle:*
!abrirjogo - Abre o jogo (apenas admins)
!fecharjogo - Fecha o jogo (apenas admins)
!menucbcoin - Mostra este menu
!menu - Menu simplificado
!perfil - Mostra suas informa√ß√µes
!ranking - Mostra o top 10 mais ricos`;

    await sock.sendMessage(groupId, { text });
}

async function showEconomyMenu(sock: any, groupId: string) {
    const text = `*üéÆ Menu R√°pido CbCoin üéÆ*

*Comandos:*
!diario - Receba 1000 CbCoins
!minerar - Minerar CbCoins
!roubar @usuario - Roubar CbCoins
!vingar @usuario - Se vingar
!emprestar @usuario [qtd] - Emprestar
!doar @usuario [qtd] - Doar
!casino [aposta] - Jogar no casino
!escudo - Comprar escudo
!amuletosorte - Comprar amuleto
!perfil - Ver suas informa√ß√µes
!ranking - Ver ranking
!menucbcoin - Menu completo

Use !menucbcoin para ver o menu completo com todas as informa√ß√µes!`;
>>>>>>> ff2530683e39c10cacf0f2adeefb6771459bca2b

    await sock.sendMessage(groupId, { text });
}

async function handleProfile(sock: any, groupId: string, sender: string, userEconomy: UserEconomy) {
    const user = await db.getUserInGroup(sender, groupId);
    if (!user) {
        await sock.sendMessage(groupId, { text: 'Usu√°rio n√£o encontrado!' });
        return;
    }

<<<<<<< HEAD
    const text = `üéÆ *Perfil do Jogador*\n
üë§ Jogador: @${sender.split('@')[0]}
üí∞ CbCoins: ${userEconomy.coins.toLocaleString('pt-BR')}

*üìä Chances Restantes:*
‚õèÔ∏è Minerar: ${userEconomy.mining_chances}/${MINING_CHANCES}
ü¶π‚Äç‚ôÇÔ∏è Roubar: ${userEconomy.steal_chances}/${STEAL_CHANCES}
‚öîÔ∏è Vingar: ${userEconomy.avenge_chances}/${AVENGE_CHANCES}
üí∏ Emprestar: ${userEconomy.lend_chances}/${LEND_CHANCES}
üéÅ Doar: ${userEconomy.donate_chances}/${DONATE_CHANCES}
üé≤ Cassino: ${userEconomy.casino_chances}/${CASINO_CHANCES}

*üõ°Ô∏è Itens Ativos:*
üõ°Ô∏è Escudo: ${userEconomy.shield ? 'Ativo' : 'Inativo'}
üçÄ Amuleto da Sorte: ${userEconomy.lucky_charm ? 'Ativo' : 'Inativo'}`;

    await sock.sendMessage(groupId, {
        text,
        mentions: [sender]
    });
}

async function handleCommands(sock: any, groupId: string) {
    const text = `‚ï≠‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïÆ
‚îÉ ü§ñ *AMANDA 3.031* ü§ñ
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïØ

üì¢ *COMANDOS DE GRUPO*
‚î†‚ä∑ !mt
‚îÉ    _Marca todos os membros_
‚î†‚ä∑ !marcar
‚îÉ    _Marca todos os membros_
‚î†‚ä∑ !ban @membro
‚îÉ    _Remove um membro do grupo_
‚î†‚ä∑ !kick @membro
‚îÉ    _Remove um membro do grupo_

üìä *ESTAT√çSTICAS*
‚î†‚ä∑ !grupo
‚îÉ    _Ver dados do grupo_
‚î†‚ä∑ !usuario
‚îÉ    _Ver dados do usu√°rio_
‚î†‚ä∑ !grupos
‚îÉ    _Lista todos os grupos_
‚î†‚ä∑ !usuarios
‚îÉ    _Lista todos os usu√°rios_

‚öôÔ∏è *CONFIGURA√á√ïES*
‚î†‚ä∑ !config
‚îÉ    _Configura√ß√µes do grupo_
‚î†‚ä∑ !menu
‚îÉ    _Mostra este menu_

‚ï≠‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïÆ
‚îÉ üë®‚Äçüíª *INFORMA√á√ïES* üë®‚Äçüíª
‚î†‚ä∑ Criador: W
‚î†‚ä∑ Contato: (21)967233931
‚îÉ
‚îÉ ¬©Ô∏è Amanda Bot 2024
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïØ`;

    await sock.sendMessage(groupId, { text });
}

// Adiciona a fun√ß√£o para pegar membro aleat√≥rio do grupo
async function getRandomGroupMember(sock: any, groupId: string, sender: string): Promise<string | null> {
    try {
        const group = await sock.groupMetadata(groupId);
        const members = group.participants
            .map(p => p.id)
            .filter(id => id !== sender); // Exclui o pr√≥prio usu√°rio
        
        if (members.length === 0) return null;
        
        const randomIndex = Math.floor(Math.random() * members.length);
        return members[randomIndex];
    } catch (error) {
        console.error('Erro ao obter membros do grupo:', error);
        return null;
    }
}

// Adiciona a fun√ß√£o para lidar com o comando sortudo
async function handleLucky(sock: any, groupId: string, sender: string, userEconomy: UserEconomy) {
    // Verifica cooldown
    if (userEconomy.lucky_cooldown && Date.now() < userEconomy.lucky_cooldown) {
        const timeLeft = Math.ceil((userEconomy.lucky_cooldown - Date.now()) / (1000 * 60 * 60));
        await sock.sendMessage(groupId, {
            text: `@${sender.split('@')[0]}, voc√™ precisa esperar ${timeLeft} horas para usar o comando sortudo novamente!`,
            mentions: [sender]
        });
        return;
    }

    // Pega um membro aleat√≥rio
    const luckyMember = await getRandomGroupMember(sock, groupId, sender);
    if (!luckyMember) {
        await sock.sendMessage(groupId, {
            text: `@${sender.split('@')[0]}, n√£o foi poss√≠vel encontrar um membro aleat√≥rio no grupo!`,
            mentions: [sender]
        });
        return;
    }

    // Atualiza o saldo e o cooldown do usu√°rio
    userEconomy.coins += LUCKY_PRIZE;
    userEconomy.lucky_cooldown = Date.now() + (24 * 60 * 60 * 1000); // 24 horas
    await db.updateUserEconomy(groupId, sender, userEconomy);

    // Envia a mensagem
    await sock.sendMessage(groupId, {
        text: `üçÄ @${sender.split('@')[0]} usou o comando sortudo e ganhou ${LUCKY_PRIZE.toLocaleString('pt-BR')} CbCoins!\n\nüéØ Membro sorteado: @${luckyMember.split('@')[0]}\n\nSaldo atual: ${userEconomy.coins.toLocaleString('pt-BR')} CbCoins`,
        mentions: [sender, luckyMember]
    });
=======
    const text = `*üë§ Perfil de ${user.user_name}*

üí∞ CbCoins: ${userEconomy.coins}
üéÅ Recompensa Di√°ria: ${userEconomy.last_daily ? 'J√° coletada' : 'Dispon√≠vel'}
‚õèÔ∏è Chances de Minerar: ${userEconomy.mining_chances}/${MINING_CHANCES}
ü¶π Chances de Roubar: ${userEconomy.steal_chances}/${STEAL_CHANCES}
‚öîÔ∏è Chances de Vingar: ${userEconomy.avenge_chances}/${AVENGE_CHANCES}
üí∏ Chances de Emprestar: ${userEconomy.lend_chances}/${LEND_CHANCES}
üéÅ Chances de Doar: ${userEconomy.donate_chances}/${DONATE_CHANCES}
üé≤ Chances no Casino: ${userEconomy.casino_chances}/${CASINO_CHANCES}
üõ°Ô∏è Escudo: ${userEconomy.shield ? 'Ativo' : 'Inativo'}
üçÄ Amuleto da Sorte: ${userEconomy.lucky_charm ? 'Ativo' : 'Inativo'}`;

    await sock.sendMessage(groupId, { text });
>>>>>>> ff2530683e39c10cacf0f2adeefb6771459bca2b
} 